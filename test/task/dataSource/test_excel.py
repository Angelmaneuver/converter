#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import NamedTuple
import unittest
import pathlib

from collections import namedtuple

import sys
sys.path.append(str((pathlib.Path(__file__).resolve().parent.parent.parent.parent).resolve()))

from src.task.dataSource.excel import ExcelDataSourceClass as testTarget


Pandas = namedtuple(
    'Pandas',
    ['Index', 'No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ']
)


class TestExcel(unittest.TestCase):
    def test_io(self):
        path = pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx')

        dataSource = testTarget(
            io=path,
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4
        )

        self.assertEqual(path, dataSource.io)

    def test_fetch(self):

        assumptions = [
            Pandas(Index=0, No=1, 神姫名='神姫1', ひらがな='お', 属性='火', タイプ='Attack', HP1=1900, Attack1=7100, HP2=2350, Attack2=8800, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='7タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='1・2タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='1・3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=1, No=2, 神姫名='神姫2', ひらがな='え', 属性='水', タイプ='Defense', HP1=1690, Attack1=6500, HP2=2500, Attack2=7500, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='7タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=2, No=3, 神姫名='神姫3', ひらがな='う', 属性='風', タイプ='Balance', HP1=1670, Attack1=8200, HP2=1800, Attack2=9660, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='-', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=3, No=4, 神姫名='神姫4', ひらがな='い', 属性='雷', タイプ='Tricky', HP1=1600, Attack1=8750, HP2='-', Attack2='-', エピソード数=2, プロフィール1='プロフィ－ル1', プロフィール2='-', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='8タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='-', あらすじ3='-', 内容3='-', タグ3='-', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=4, No=5, 神姫名='神姫5', ひらがな='あ', 属性='光', タイプ='Healer', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=5, No=6, 神姫名='神姫6', ひらがな='か', 属性='闇', タイプ='Attack', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
        ]

        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)


        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4,
            sort_by=['ひらがな'],
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)


        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4,
            ascending=[True]
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)


        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4,
            sort_by=['ひらがな'],
            ascending=[True, True]
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)


        assumptions = [
            Pandas(Index=4, No=5, 神姫名='神姫5', ひらがな='あ', 属性='光', タイプ='Healer', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=3, No=4, 神姫名='神姫4', ひらがな='い', 属性='雷', タイプ='Tricky', HP1=1600, Attack1=8750, HP2='-', Attack2='-', エピソード数=2, プロフィール1='プロフィ－ル1', プロフィール2='-', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='8タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='-', あらすじ3='-', 内容3='-', タグ3='-', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=2, No=3, 神姫名='神姫3', ひらがな='う', 属性='風', タイプ='Balance', HP1=1670, Attack1=8200, HP2=1800, Attack2=9660, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='-', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=1, No=2, 神姫名='神姫2', ひらがな='え', 属性='水', タイプ='Defense', HP1=1690, Attack1=6500, HP2=2500, Attack2=7500, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='7タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=0, No=1, 神姫名='神姫1', ひらがな='お', 属性='火', タイプ='Attack', HP1=1900, Attack1=7100, HP2=2350, Attack2=8800, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='7タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='1・2タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='1・3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=5, No=6, 神姫名='神姫6', ひらがな='か', 属性='闇', タイプ='Attack', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
        ]

        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4,
            sort_by=['ひらがな'],
            ascending=[True]
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)


        assumptions = [
            Pandas(Index=5, No=6, 神姫名='神姫6', ひらがな='か', 属性='闇', タイプ='Attack', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=4, No=5, 神姫名='神姫5', ひらがな='あ', 属性='光', タイプ='Healer', HP1=1310, Attack1=9650, HP2='不明', Attack2='不明', エピソード数=3, プロフィール1='不明', プロフィール2='不明', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='-', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='不明', あらすじ3='不明', 内容3='不明', タグ3='??????', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=3, No=4, 神姫名='神姫4', ひらがな='い', 属性='雷', タイプ='Tricky', HP1=1600, Attack1=8750, HP2='-', Attack2='-', エピソード数=2, プロフィール1='プロフィ－ル1', プロフィール2='-', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='8タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='-', あらすじ3='-', 内容3='-', タグ3='-', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=2, No=3, 神姫名='神姫3', ひらがな='う', 属性='風', タイプ='Balance', HP1=1670, Attack1=8200, HP2=1800, Attack2=9660, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='180秒', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='3タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='-', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=1, No=2, 神姫名='神姫2', ひらがな='え', 属性='水', タイプ='Defense', HP1=1690, Attack1=6500, HP2=2500, Attack2=7500, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='6タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='7タ－ン', 効果時間2='-', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='7タ－ン', 効果時間3='3タ－ン180秒', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
            Pandas(Index=0, No=1, 神姫名='神姫1', ひらがな='お', 属性='火', タイプ='Attack', HP1=1900, Attack1=7100, HP2=2350, Attack2=8800, エピソード数=3, プロフィール1='プロフィ－ル1', プロフィール2='プロフィ－ル2', アビリティ1='アビリティ1', 効果1='効果1', 使用間隔1='7タ－ン', 効果時間1='3タ－ン', アビリティ2='アビリティ2', 効果2='効果2', 使用間隔2='6タ－ン', 効果時間2='1・2タ－ン', アビリティ3='アビリティ3', 効果3='効果3', 使用間隔3='6タ－ン', 効果時間3='1・3タ－ン', アビリティ4='-', 効果4='-', 使用間隔4='-', 効果時間4='-', エピソード1='エピソ－ド1', あらすじ1='あらすじ1', 内容1='内容1', タグ1='タグ1', エピソード2='エピソ－ド2', あらすじ2='あらすじ2', 内容2='内容2', タグ2='タグ2', エピソード3='エピソ－ド3', あらすじ3='あらすじ3', 内容3='内容3', タグ3='タグ3', HTML1='-', HTML設定先1='-', HTML2='-', HTML設定先2='-', 取得フラグ=True),
        ]

        dataSource = testTarget(
            io=pathlib.Path(__file__).parent.joinpath('excel', 'test_excel.xlsx'),
            sheet_name='神姫リスト',
            header=None,
            names= ['No', '神姫名', 'ひらがな', '属性', 'タイプ', 'HP1', 'Attack1', 'HP2', 'Attack2', 'エピソード数', 'プロフィール1', 'プロフィール2', 'アビリティ1', '効果1', '使用間隔1', '効果時間1', 'アビリティ2', '効果2', '使用間隔2', '効果時間2', 'アビリティ3', '効果3', '使用間隔3', '効果時間3', 'アビリティ4', '効果4', '使用間隔4', '効果時間4', 'エピソード1', 'あらすじ1', '内容1', 'タグ1', 'エピソード2', 'あらすじ2', '内容2', 'タグ2', 'エピソード3', 'あらすじ3', '内容3', 'タグ3', 'HTML1', 'HTML設定先1', 'HTML2', 'HTML設定先2', '取得フラグ'],
            skiprows=4,
            sort_by=['No'],
            ascending=[False]
        )

        for i, row in enumerate(dataSource.fetch()):
            self.compare(assumptions[i], row)

    def compare(self, assumption:Pandas, row):
            self.assertEqual(assumption.Index, row.Index)
            self.assertEqual(assumption.No, row.No)
            self.assertEqual(assumption.神姫名, row.神姫名)
            self.assertEqual(assumption.ひらがな, row.ひらがな)
            self.assertEqual(assumption.属性, row.属性)
            self.assertEqual(assumption.タイプ, row.タイプ)
            self.assertEqual(assumption.HP1, row.HP1)
            self.assertEqual(assumption.Attack1, row.Attack1)
            self.assertEqual(assumption.HP2, row.HP2)
            self.assertEqual(assumption.Attack2, row.Attack2)
            self.assertEqual(assumption.エピソード数, row.エピソード数)
            self.assertEqual(assumption.アビリティ1, row.アビリティ1)
            self.assertEqual(assumption.効果1, row.効果1)
            self.assertEqual(assumption.使用間隔1, row.使用間隔1)
            self.assertEqual(assumption.効果時間1, row.効果時間1)
            self.assertEqual(assumption.アビリティ2, row.アビリティ2)
            self.assertEqual(assumption.効果2, row.効果2)
            self.assertEqual(assumption.使用間隔2, row.使用間隔2)
            self.assertEqual(assumption.効果時間2, row.効果時間2)
            self.assertEqual(assumption.アビリティ3, row.アビリティ3)
            self.assertEqual(assumption.効果3, row.効果3)
            self.assertEqual(assumption.使用間隔3, row.使用間隔3)
            self.assertEqual(assumption.効果時間3, row.効果時間3)
            self.assertEqual(assumption.アビリティ4, row.アビリティ4)
            self.assertEqual(assumption.効果4, row.効果4)
            self.assertEqual(assumption.使用間隔4, row.使用間隔4)
            self.assertEqual(assumption.効果時間4, row.効果時間4)
            self.assertEqual(assumption.エピソード1, row.エピソード1)
            self.assertEqual(assumption.あらすじ1, row.あらすじ1)
            self.assertEqual(assumption.内容1, row.内容1)
            self.assertEqual(assumption.タグ1, row.タグ1)
            self.assertEqual(assumption.エピソード2, row.エピソード2)
            self.assertEqual(assumption.あらすじ2, row.あらすじ2)
            self.assertEqual(assumption.内容2, row.内容2)
            self.assertEqual(assumption.タグ2, row.タグ2)
            self.assertEqual(assumption.エピソード3, row.エピソード3)
            self.assertEqual(assumption.あらすじ3, row.あらすじ3)
            self.assertEqual(assumption.内容3, row.内容3)
            self.assertEqual(assumption.タグ3, row.タグ3)
            self.assertEqual(assumption.HTML1, row.HTML1)
            self.assertEqual(assumption.HTML設定先1, row.HTML設定先1)
            self.assertEqual(assumption.HTML2, row.HTML2)
            self.assertEqual(assumption.HTML設定先2, row.HTML設定先2)
            self.assertEqual(assumption.取得フラグ, row.取得フラグ)


if __name__ == '__main__':
    unittest.main()
